#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(clippy::all)]
#![deny(clippy::cargo)]

/* automatically generated by rust-bindgen 0.58.1 */

pub const vlFalse: u32 = 0;
pub const vlTrue: u32 = 1;
pub const VL_VERSION: u32 = 132;
pub const VL_VERSION_STRING: &'static [u8; 6usize] = b"1.3.2\0";
pub const VTF_MAJOR_VERSION: u32 = 7;
pub const VTF_MINOR_VERSION: u32 = 5;
pub const VTF_MINOR_VERSION_MIN_SPHERE_MAP: u32 = 1;
pub const VTF_MINOR_VERSION_MIN_VOLUME: u32 = 2;
pub type vlBool = ::std::os::raw::c_uchar;
pub type vlChar = ::std::os::raw::c_char;
pub type vlByte = ::std::os::raw::c_uchar;
pub type vlShort = ::std::os::raw::c_short;
pub type vlUShort = ::std::os::raw::c_ushort;
pub type vlInt = ::std::os::raw::c_int;
pub type vlUInt = ::std::os::raw::c_uint;
pub type vlLong = ::std::os::raw::c_long;
pub type vlULong = ::std::os::raw::c_ulong;
pub type vlSingle = f32;
pub type vlDouble = f64;
pub type vlVoid = ::std::os::raw::c_void;
pub type vlFloat = vlSingle;
pub const tagVTFLibOption_VTFLIB_DXT_QUALITY: tagVTFLibOption = 0;
pub const tagVTFLibOption_VTFLIB_LUMINANCE_WEIGHT_R: tagVTFLibOption = 1;
pub const tagVTFLibOption_VTFLIB_LUMINANCE_WEIGHT_G: tagVTFLibOption = 2;
pub const tagVTFLibOption_VTFLIB_LUMINANCE_WEIGHT_B: tagVTFLibOption = 3;
pub const tagVTFLibOption_VTFLIB_BLUESCREEN_MASK_R: tagVTFLibOption = 4;
pub const tagVTFLibOption_VTFLIB_BLUESCREEN_MASK_G: tagVTFLibOption = 5;
pub const tagVTFLibOption_VTFLIB_BLUESCREEN_MASK_B: tagVTFLibOption = 6;
pub const tagVTFLibOption_VTFLIB_BLUESCREEN_CLEAR_R: tagVTFLibOption = 7;
pub const tagVTFLibOption_VTFLIB_BLUESCREEN_CLEAR_G: tagVTFLibOption = 8;
pub const tagVTFLibOption_VTFLIB_BLUESCREEN_CLEAR_B: tagVTFLibOption = 9;
pub const tagVTFLibOption_VTFLIB_FP16_HDR_KEY: tagVTFLibOption = 10;
pub const tagVTFLibOption_VTFLIB_FP16_HDR_SHIFT: tagVTFLibOption = 11;
pub const tagVTFLibOption_VTFLIB_FP16_HDR_GAMMA: tagVTFLibOption = 12;
pub const tagVTFLibOption_VTFLIB_UNSHARPEN_RADIUS: tagVTFLibOption = 13;
pub const tagVTFLibOption_VTFLIB_UNSHARPEN_AMOUNT: tagVTFLibOption = 14;
pub const tagVTFLibOption_VTFLIB_UNSHARPEN_THRESHOLD: tagVTFLibOption = 15;
pub const tagVTFLibOption_VTFLIB_XSHARPEN_STRENGTH: tagVTFLibOption = 16;
pub const tagVTFLibOption_VTFLIB_XSHARPEN_THRESHOLD: tagVTFLibOption = 17;
pub const tagVTFLibOption_VTFLIB_VMT_PARSE_MODE: tagVTFLibOption = 18;
pub type tagVTFLibOption = ::std::os::raw::c_int;
pub use self::tagVTFLibOption as VTFLibOption;
pub const tagVTFImageFormat_IMAGE_FORMAT_RGBA8888: tagVTFImageFormat = 0;
pub const tagVTFImageFormat_IMAGE_FORMAT_ABGR8888: tagVTFImageFormat = 1;
pub const tagVTFImageFormat_IMAGE_FORMAT_RGB888: tagVTFImageFormat = 2;
pub const tagVTFImageFormat_IMAGE_FORMAT_BGR888: tagVTFImageFormat = 3;
pub const tagVTFImageFormat_IMAGE_FORMAT_RGB565: tagVTFImageFormat = 4;
pub const tagVTFImageFormat_IMAGE_FORMAT_I8: tagVTFImageFormat = 5;
pub const tagVTFImageFormat_IMAGE_FORMAT_IA88: tagVTFImageFormat = 6;
pub const tagVTFImageFormat_IMAGE_FORMAT_P8: tagVTFImageFormat = 7;
pub const tagVTFImageFormat_IMAGE_FORMAT_A8: tagVTFImageFormat = 8;
pub const tagVTFImageFormat_IMAGE_FORMAT_RGB888_BLUESCREEN: tagVTFImageFormat = 9;
pub const tagVTFImageFormat_IMAGE_FORMAT_BGR888_BLUESCREEN: tagVTFImageFormat = 10;
pub const tagVTFImageFormat_IMAGE_FORMAT_ARGB8888: tagVTFImageFormat = 11;
pub const tagVTFImageFormat_IMAGE_FORMAT_BGRA8888: tagVTFImageFormat = 12;
pub const tagVTFImageFormat_IMAGE_FORMAT_DXT1: tagVTFImageFormat = 13;
pub const tagVTFImageFormat_IMAGE_FORMAT_DXT3: tagVTFImageFormat = 14;
pub const tagVTFImageFormat_IMAGE_FORMAT_DXT5: tagVTFImageFormat = 15;
pub const tagVTFImageFormat_IMAGE_FORMAT_BGRX8888: tagVTFImageFormat = 16;
pub const tagVTFImageFormat_IMAGE_FORMAT_BGR565: tagVTFImageFormat = 17;
pub const tagVTFImageFormat_IMAGE_FORMAT_BGRX5551: tagVTFImageFormat = 18;
pub const tagVTFImageFormat_IMAGE_FORMAT_BGRA4444: tagVTFImageFormat = 19;
pub const tagVTFImageFormat_IMAGE_FORMAT_DXT1_ONEBITALPHA: tagVTFImageFormat = 20;
pub const tagVTFImageFormat_IMAGE_FORMAT_BGRA5551: tagVTFImageFormat = 21;
pub const tagVTFImageFormat_IMAGE_FORMAT_UV88: tagVTFImageFormat = 22;
pub const tagVTFImageFormat_IMAGE_FORMAT_UVWQ8888: tagVTFImageFormat = 23;
pub const tagVTFImageFormat_IMAGE_FORMAT_RGBA16161616F: tagVTFImageFormat = 24;
pub const tagVTFImageFormat_IMAGE_FORMAT_RGBA16161616: tagVTFImageFormat = 25;
pub const tagVTFImageFormat_IMAGE_FORMAT_UVLX8888: tagVTFImageFormat = 26;
pub const tagVTFImageFormat_IMAGE_FORMAT_R32F: tagVTFImageFormat = 27;
pub const tagVTFImageFormat_IMAGE_FORMAT_RGB323232F: tagVTFImageFormat = 28;
pub const tagVTFImageFormat_IMAGE_FORMAT_RGBA32323232F: tagVTFImageFormat = 29;
pub const tagVTFImageFormat_IMAGE_FORMAT_NV_DST16: tagVTFImageFormat = 30;
pub const tagVTFImageFormat_IMAGE_FORMAT_NV_DST24: tagVTFImageFormat = 31;
pub const tagVTFImageFormat_IMAGE_FORMAT_NV_INTZ: tagVTFImageFormat = 32;
pub const tagVTFImageFormat_IMAGE_FORMAT_NV_RAWZ: tagVTFImageFormat = 33;
pub const tagVTFImageFormat_IMAGE_FORMAT_ATI_DST16: tagVTFImageFormat = 34;
pub const tagVTFImageFormat_IMAGE_FORMAT_ATI_DST24: tagVTFImageFormat = 35;
pub const tagVTFImageFormat_IMAGE_FORMAT_NV_NULL: tagVTFImageFormat = 36;
pub const tagVTFImageFormat_IMAGE_FORMAT_ATI2N: tagVTFImageFormat = 37;
pub const tagVTFImageFormat_IMAGE_FORMAT_ATI1N: tagVTFImageFormat = 38;
pub const tagVTFImageFormat_IMAGE_FORMAT_COUNT: tagVTFImageFormat = 39;
pub const tagVTFImageFormat_IMAGE_FORMAT_NONE: tagVTFImageFormat = -1;
pub type tagVTFImageFormat = ::std::os::raw::c_int;
pub use self::tagVTFImageFormat as VTFImageFormat;
pub const tagVTFImageFlag_TEXTUREFLAGS_POINTSAMPLE: tagVTFImageFlag = 1;
pub const tagVTFImageFlag_TEXTUREFLAGS_TRILINEAR: tagVTFImageFlag = 2;
pub const tagVTFImageFlag_TEXTUREFLAGS_CLAMPS: tagVTFImageFlag = 4;
pub const tagVTFImageFlag_TEXTUREFLAGS_CLAMPT: tagVTFImageFlag = 8;
pub const tagVTFImageFlag_TEXTUREFLAGS_ANISOTROPIC: tagVTFImageFlag = 16;
pub const tagVTFImageFlag_TEXTUREFLAGS_HINT_DXT5: tagVTFImageFlag = 32;
pub const tagVTFImageFlag_TEXTUREFLAGS_SRGB: tagVTFImageFlag = 64;
pub const tagVTFImageFlag_TEXTUREFLAGS_DEPRECATED_NOCOMPRESS: tagVTFImageFlag = 64;
pub const tagVTFImageFlag_TEXTUREFLAGS_NORMAL: tagVTFImageFlag = 128;
pub const tagVTFImageFlag_TEXTUREFLAGS_NOMIP: tagVTFImageFlag = 256;
pub const tagVTFImageFlag_TEXTUREFLAGS_NOLOD: tagVTFImageFlag = 512;
pub const tagVTFImageFlag_TEXTUREFLAGS_MINMIP: tagVTFImageFlag = 1024;
pub const tagVTFImageFlag_TEXTUREFLAGS_PROCEDURAL: tagVTFImageFlag = 2048;
#[doc = "!< Automatically generated by VTex."]
pub const tagVTFImageFlag_TEXTUREFLAGS_ONEBITALPHA: tagVTFImageFlag = 4096;
#[doc = "!< Automatically generated by VTex."]
pub const tagVTFImageFlag_TEXTUREFLAGS_EIGHTBITALPHA: tagVTFImageFlag = 8192;
pub const tagVTFImageFlag_TEXTUREFLAGS_ENVMAP: tagVTFImageFlag = 16384;
pub const tagVTFImageFlag_TEXTUREFLAGS_RENDERTARGET: tagVTFImageFlag = 32768;
pub const tagVTFImageFlag_TEXTUREFLAGS_DEPTHRENDERTARGET: tagVTFImageFlag = 65536;
pub const tagVTFImageFlag_TEXTUREFLAGS_NODEBUGOVERRIDE: tagVTFImageFlag = 131072;
pub const tagVTFImageFlag_TEXTUREFLAGS_SINGLECOPY: tagVTFImageFlag = 262144;
#[doc = "!< Originally internal to VTex as TEXTUREFLAGS_ONEOVERMIPLEVELINALPHA."]
pub const tagVTFImageFlag_TEXTUREFLAGS_UNUSED0: tagVTFImageFlag = 524288;
pub const tagVTFImageFlag_TEXTUREFLAGS_DEPRECATED_ONEOVERMIPLEVELINALPHA: tagVTFImageFlag = 524288;
#[doc = "!< Originally internal to VTex as TEXTUREFLAGS_PREMULTCOLORBYONEOVERMIPLEVEL."]
pub const tagVTFImageFlag_TEXTUREFLAGS_UNUSED1: tagVTFImageFlag = 1048576;
pub const tagVTFImageFlag_TEXTUREFLAGS_DEPRECATED_PREMULTCOLORBYONEOVERMIPLEVEL: tagVTFImageFlag =
    1048576;
#[doc = "!< Originally internal to VTex as TEXTUREFLAGS_NORMALTODUDV."]
pub const tagVTFImageFlag_TEXTUREFLAGS_UNUSED2: tagVTFImageFlag = 2097152;
pub const tagVTFImageFlag_TEXTUREFLAGS_DEPRECATED_NORMALTODUDV: tagVTFImageFlag = 2097152;
#[doc = "!< Originally internal to VTex as TEXTUREFLAGS_ALPHATESTMIPGENERATION."]
pub const tagVTFImageFlag_TEXTUREFLAGS_UNUSED3: tagVTFImageFlag = 4194304;
pub const tagVTFImageFlag_TEXTUREFLAGS_DEPRECATED_ALPHATESTMIPGENERATION: tagVTFImageFlag = 4194304;
pub const tagVTFImageFlag_TEXTUREFLAGS_NODEPTHBUFFER: tagVTFImageFlag = 8388608;
#[doc = "!< Originally internal to VTex as TEXTUREFLAGS_NICEFILTERED."]
pub const tagVTFImageFlag_TEXTUREFLAGS_UNUSED4: tagVTFImageFlag = 16777216;
pub const tagVTFImageFlag_TEXTUREFLAGS_DEPRECATED_NICEFILTERED: tagVTFImageFlag = 16777216;
pub const tagVTFImageFlag_TEXTUREFLAGS_CLAMPU: tagVTFImageFlag = 33554432;
pub const tagVTFImageFlag_TEXTUREFLAGS_VERTEXTEXTURE: tagVTFImageFlag = 67108864;
pub const tagVTFImageFlag_TEXTUREFLAGS_SSBUMP: tagVTFImageFlag = 134217728;
#[doc = "!< Originally TEXTUREFLAGS_UNFILTERABLE_OK."]
pub const tagVTFImageFlag_TEXTUREFLAGS_UNUSED5: tagVTFImageFlag = 268435456;
pub const tagVTFImageFlag_TEXTUREFLAGS_DEPRECATED_UNFILTERABLE_OK: tagVTFImageFlag = 268435456;
pub const tagVTFImageFlag_TEXTUREFLAGS_BORDER: tagVTFImageFlag = 536870912;
pub const tagVTFImageFlag_TEXTUREFLAGS_DEPRECATED_SPECVAR_RED: tagVTFImageFlag = 1073741824;
pub const tagVTFImageFlag_TEXTUREFLAGS_DEPRECATED_SPECVAR_ALPHA: tagVTFImageFlag = -2147483648;
pub const tagVTFImageFlag_TEXTUREFLAGS_LAST: tagVTFImageFlag = 536870912;
pub const tagVTFImageFlag_TEXTUREFLAGS_COUNT: tagVTFImageFlag = 30;
pub type tagVTFImageFlag = ::std::os::raw::c_int;
pub use self::tagVTFImageFlag as VTFImageFlag;
pub const tagVTFCubeMapFace_CUBEMAP_FACE_RIGHT: tagVTFCubeMapFace = 0;
pub const tagVTFCubeMapFace_CUBEMAP_FACE_LEFT: tagVTFCubeMapFace = 1;
pub const tagVTFCubeMapFace_CUBEMAP_FACE_BACK: tagVTFCubeMapFace = 2;
pub const tagVTFCubeMapFace_CUBEMAP_FACE_FRONT: tagVTFCubeMapFace = 3;
pub const tagVTFCubeMapFace_CUBEMAP_FACE_UP: tagVTFCubeMapFace = 4;
pub const tagVTFCubeMapFace_CUBEMAP_FACE_DOWN: tagVTFCubeMapFace = 5;
pub const tagVTFCubeMapFace_CUBEMAP_FACE_SPHERE_MAP: tagVTFCubeMapFace = 6;
pub const tagVTFCubeMapFace_CUBEMAP_FACE_COUNT: tagVTFCubeMapFace = 7;
pub type tagVTFCubeMapFace = ::std::os::raw::c_int;
pub use self::tagVTFCubeMapFace as VTFCubeMapFace;
pub const tagVTFMipmapFilter_MIPMAP_FILTER_POINT: tagVTFMipmapFilter = 0;
pub const tagVTFMipmapFilter_MIPMAP_FILTER_BOX: tagVTFMipmapFilter = 1;
pub const tagVTFMipmapFilter_MIPMAP_FILTER_TRIANGLE: tagVTFMipmapFilter = 2;
pub const tagVTFMipmapFilter_MIPMAP_FILTER_QUADRATIC: tagVTFMipmapFilter = 3;
pub const tagVTFMipmapFilter_MIPMAP_FILTER_CUBIC: tagVTFMipmapFilter = 4;
pub const tagVTFMipmapFilter_MIPMAP_FILTER_CATROM: tagVTFMipmapFilter = 5;
pub const tagVTFMipmapFilter_MIPMAP_FILTER_MITCHELL: tagVTFMipmapFilter = 6;
pub const tagVTFMipmapFilter_MIPMAP_FILTER_GAUSSIAN: tagVTFMipmapFilter = 7;
pub const tagVTFMipmapFilter_MIPMAP_FILTER_SINC: tagVTFMipmapFilter = 8;
pub const tagVTFMipmapFilter_MIPMAP_FILTER_BESSEL: tagVTFMipmapFilter = 9;
pub const tagVTFMipmapFilter_MIPMAP_FILTER_HANNING: tagVTFMipmapFilter = 10;
pub const tagVTFMipmapFilter_MIPMAP_FILTER_HAMMING: tagVTFMipmapFilter = 11;
pub const tagVTFMipmapFilter_MIPMAP_FILTER_BLACKMAN: tagVTFMipmapFilter = 12;
pub const tagVTFMipmapFilter_MIPMAP_FILTER_KAISER: tagVTFMipmapFilter = 13;
pub const tagVTFMipmapFilter_MIPMAP_FILTER_COUNT: tagVTFMipmapFilter = 14;
pub type tagVTFMipmapFilter = ::std::os::raw::c_int;
pub use self::tagVTFMipmapFilter as VTFMipmapFilter;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_NONE: tagVTFSharpenFilter = 0;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_NEGATIVE: tagVTFSharpenFilter = 1;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_LIGHTER: tagVTFSharpenFilter = 2;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_DARKER: tagVTFSharpenFilter = 3;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_CONTRASTMORE: tagVTFSharpenFilter = 4;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_CONTRASTLESS: tagVTFSharpenFilter = 5;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_SMOOTHEN: tagVTFSharpenFilter = 6;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_SHARPENSOFT: tagVTFSharpenFilter = 7;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_SHARPENMEDIUM: tagVTFSharpenFilter = 8;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_SHARPENSTRONG: tagVTFSharpenFilter = 9;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_FINDEDGES: tagVTFSharpenFilter = 10;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_CONTOUR: tagVTFSharpenFilter = 11;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_EDGEDETECT: tagVTFSharpenFilter = 12;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_EDGEDETECTSOFT: tagVTFSharpenFilter = 13;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_EMBOSS: tagVTFSharpenFilter = 14;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_MEANREMOVAL: tagVTFSharpenFilter = 15;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_UNSHARP: tagVTFSharpenFilter = 16;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_XSHARPEN: tagVTFSharpenFilter = 17;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_WARPSHARP: tagVTFSharpenFilter = 18;
pub const tagVTFSharpenFilter_SHARPEN_FILTER_COUNT: tagVTFSharpenFilter = 19;
pub type tagVTFSharpenFilter = ::std::os::raw::c_int;
pub use self::tagVTFSharpenFilter as VTFSharpenFilter;
pub const tagDXTQuality_DXT_QUALITY_LOW: tagDXTQuality = 0;
pub const tagDXTQuality_DXT_QUALITY_MEDIUM: tagDXTQuality = 1;
pub const tagDXTQuality_DXT_QUALITY_HIGH: tagDXTQuality = 2;
pub const tagDXTQuality_DXT_QUALITY_HIGHEST: tagDXTQuality = 3;
pub const tagDXTQuality_DXT_QUALITY_COUNT: tagDXTQuality = 4;
pub type tagDXTQuality = ::std::os::raw::c_int;
pub use self::tagDXTQuality as VTFDXTQuality;
pub const tagVTFKernelFilter_KERNEL_FILTER_4X: tagVTFKernelFilter = 0;
pub const tagVTFKernelFilter_KERNEL_FILTER_3X3: tagVTFKernelFilter = 1;
pub const tagVTFKernelFilter_KERNEL_FILTER_5X5: tagVTFKernelFilter = 2;
pub const tagVTFKernelFilter_KERNEL_FILTER_7X7: tagVTFKernelFilter = 3;
pub const tagVTFKernelFilter_KERNEL_FILTER_9X9: tagVTFKernelFilter = 4;
pub const tagVTFKernelFilter_KERNEL_FILTER_DUDV: tagVTFKernelFilter = 5;
pub const tagVTFKernelFilter_KERNEL_FILTER_COUNT: tagVTFKernelFilter = 6;
pub type tagVTFKernelFilter = ::std::os::raw::c_int;
pub use self::tagVTFKernelFilter as VTFKernelFilter;
pub const tagVTFHeightConversionMethod_HEIGHT_CONVERSION_METHOD_ALPHA:
    tagVTFHeightConversionMethod = 0;
pub const tagVTFHeightConversionMethod_HEIGHT_CONVERSION_METHOD_AVERAGE_RGB:
    tagVTFHeightConversionMethod = 1;
pub const tagVTFHeightConversionMethod_HEIGHT_CONVERSION_METHOD_BIASED_RGB:
    tagVTFHeightConversionMethod = 2;
pub const tagVTFHeightConversionMethod_HEIGHT_CONVERSION_METHOD_RED: tagVTFHeightConversionMethod =
    3;
pub const tagVTFHeightConversionMethod_HEIGHT_CONVERSION_METHOD_GREEN:
    tagVTFHeightConversionMethod = 4;
pub const tagVTFHeightConversionMethod_HEIGHT_CONVERSION_METHOD_BLUE: tagVTFHeightConversionMethod =
    5;
pub const tagVTFHeightConversionMethod_HEIGHT_CONVERSION_METHOD_MAX_RGB:
    tagVTFHeightConversionMethod = 6;
pub const tagVTFHeightConversionMethod_HEIGHT_CONVERSION_METHOD_COLORSPACE:
    tagVTFHeightConversionMethod = 7;
pub const tagVTFHeightConversionMethod_HEIGHT_CONVERSION_METHOD_COUNT:
    tagVTFHeightConversionMethod = 8;
pub type tagVTFHeightConversionMethod = ::std::os::raw::c_int;
pub use self::tagVTFHeightConversionMethod as VTFHeightConversionMethod;
pub const tagVTFNormalAlphaResult_NORMAL_ALPHA_RESULT_NOCHANGE: tagVTFNormalAlphaResult = 0;
pub const tagVTFNormalAlphaResult_NORMAL_ALPHA_RESULT_HEIGHT: tagVTFNormalAlphaResult = 1;
pub const tagVTFNormalAlphaResult_NORMAL_ALPHA_RESULT_BLACK: tagVTFNormalAlphaResult = 2;
pub const tagVTFNormalAlphaResult_NORMAL_ALPHA_RESULT_WHITE: tagVTFNormalAlphaResult = 3;
pub const tagVTFNormalAlphaResult_NORMAL_ALPHA_RESULT_COUNT: tagVTFNormalAlphaResult = 4;
pub type tagVTFNormalAlphaResult = ::std::os::raw::c_int;
pub use self::tagVTFNormalAlphaResult as VTFNormalAlphaResult;
pub const tagVTFResizeMethod_RESIZE_NEAREST_POWER2: tagVTFResizeMethod = 0;
pub const tagVTFResizeMethod_RESIZE_BIGGEST_POWER2: tagVTFResizeMethod = 1;
pub const tagVTFResizeMethod_RESIZE_SMALLEST_POWER2: tagVTFResizeMethod = 2;
pub const tagVTFResizeMethod_RESIZE_SET: tagVTFResizeMethod = 3;
pub const tagVTFResizeMethod_RESIZE_COUNT: tagVTFResizeMethod = 4;
pub type tagVTFResizeMethod = ::std::os::raw::c_int;
pub use self::tagVTFResizeMethod as VTFResizeMethod;
pub const tagVTFResourceEntryTypeFlag_RSRCF_HAS_NO_DATA_CHUNK: tagVTFResourceEntryTypeFlag = 2;
pub type tagVTFResourceEntryTypeFlag = ::std::os::raw::c_int;
pub use self::tagVTFResourceEntryTypeFlag as VTFResourceEntryTypeFlag;
pub const tagVTFResourceEntryType_VTF_LEGACY_RSRC_LOW_RES_IMAGE: tagVTFResourceEntryType = 1;
pub const tagVTFResourceEntryType_VTF_LEGACY_RSRC_IMAGE: tagVTFResourceEntryType = 48;
pub const tagVTFResourceEntryType_VTF_RSRC_SHEET: tagVTFResourceEntryType = 16;
pub const tagVTFResourceEntryType_VTF_RSRC_CRC: tagVTFResourceEntryType = 37966403;
pub const tagVTFResourceEntryType_VTF_RSRC_TEXTURE_LOD_SETTINGS: tagVTFResourceEntryType = 38031180;
pub const tagVTFResourceEntryType_VTF_RSRC_TEXTURE_SETTINGS_EX: tagVTFResourceEntryType = 38753108;
pub const tagVTFResourceEntryType_VTF_RSRC_KEY_VALUE_DATA: tagVTFResourceEntryType = 4478539;
pub const tagVTFResourceEntryType_VTF_RSRC_MAX_DICTIONARY_ENTRIES: tagVTFResourceEntryType = 32;
pub type tagVTFResourceEntryType = ::std::os::raw::c_int;
pub use self::tagVTFResourceEntryType as VTFResourceEntryType;
pub const tagVMTParseMode_PARSE_MODE_STRICT: tagVMTParseMode = 0;
pub const tagVMTParseMode_PARSE_MODE_LOOSE: tagVMTParseMode = 1;
pub const tagVMTParseMode_PARSE_MODE_COUNT: tagVMTParseMode = 2;
pub type tagVMTParseMode = ::std::os::raw::c_int;
pub use self::tagVMTParseMode as VMTParseMode;
pub const tagVMTNodeType_NODE_TYPE_GROUP: tagVMTNodeType = 0;
pub const tagVMTNodeType_NODE_TYPE_GROUP_END: tagVMTNodeType = 1;
pub const tagVMTNodeType_NODE_TYPE_STRING: tagVMTNodeType = 2;
pub const tagVMTNodeType_NODE_TYPE_INTEGER: tagVMTNodeType = 3;
pub const tagVMTNodeType_NODE_TYPE_SINGLE: tagVMTNodeType = 4;
pub const tagVMTNodeType_NODE_TYPE_COUNT: tagVMTNodeType = 5;
pub type tagVMTNodeType = ::std::os::raw::c_int;
pub use self::tagVMTNodeType as VMTNodeType;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tagSVTFImageFormatInfo {
    #[doc = "!< Enumeration text equivalent."]
    pub lpName: *mut vlChar,
    #[doc = "!< Format bits per pixel."]
    pub uiBitsPerPixel: vlUInt,
    #[doc = "!< Format bytes per pixel."]
    pub uiBytesPerPixel: vlUInt,
    #[doc = "!< Format red bits per pixel.  0 for N/A."]
    pub uiRedBitsPerPixel: vlUInt,
    #[doc = "!< Format green bits per pixel.  0 for N/A."]
    pub uiGreenBitsPerPixel: vlUInt,
    #[doc = "!< Format blue bits per pixel.  0 for N/A."]
    pub uiBlueBitsPerPixel: vlUInt,
    #[doc = "!< Format alpha bits per pixel.  0 for N/A."]
    pub uiAlphaBitsPerPixel: vlUInt,
    #[doc = "!< Format is compressed (DXT)."]
    pub bIsCompressed: vlBool,
    #[doc = "!< Format is supported by VTFLib."]
    pub bIsSupported: vlBool,
}
pub type SVTFImageFormatInfo = tagSVTFImageFormatInfo;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct tagSVTFCreateOptions {
    #[doc = "!< Output image version."]
    pub uiVersion: [vlUInt; 2usize],
    #[doc = "!< Output image output storage format."]
    pub ImageFormat: VTFImageFormat,
    #[doc = "!< Output image header flags."]
    pub uiFlags: vlUInt,
    #[doc = "!< Output image start frame."]
    pub uiStartFrame: vlUInt,
    #[doc = "!< Output image bump scale."]
    pub sBumpScale: vlSingle,
    #[doc = "!< Output image reflectivity. (Only used if bReflectivity is false.)"]
    pub sReflectivity: [vlSingle; 3usize],
    #[doc = "!< Generate MIPmaps. (Space is always allocated.)"]
    pub bMipmaps: vlBool,
    #[doc = "!< MIP map re-size filter."]
    pub MipmapFilter: VTFMipmapFilter,
    #[doc = "!< MIP map sharpen filter."]
    pub MipmapSharpenFilter: VTFSharpenFilter,
    #[doc = "!< Generate thumbnail image."]
    pub bThumbnail: vlBool,
    #[doc = "!< Compute image reflectivity."]
    pub bReflectivity: vlBool,
    #[doc = "!< Resize the input image."]
    pub bResize: vlBool,
    #[doc = "!< New size compution method."]
    pub ResizeMethod: VTFResizeMethod,
    #[doc = "!< Re-size filter."]
    pub ResizeFilter: VTFMipmapFilter,
    #[doc = "!< Sharpen filter."]
    pub ResizeSharpenFilter: VTFSharpenFilter,
    #[doc = "!< New width after re-size if method is RESIZE_SET."]
    pub uiResizeWidth: vlUInt,
    #[doc = "!< New height after re-size if method is RESIZE_SET."]
    pub uiResizeHeight: vlUInt,
    #[doc = "!< Clamp re-size size."]
    pub bResizeClamp: vlBool,
    #[doc = "!< Maximum width to re-size to."]
    pub uiResizeClampWidth: vlUInt,
    #[doc = "!< Maximum height to re-size to."]
    pub uiResizeClampHeight: vlUInt,
    #[doc = "!< Gamma correct input image."]
    pub bGammaCorrection: vlBool,
    #[doc = "!< Gamma correction to apply."]
    pub sGammaCorrection: vlSingle,
    #[doc = "!< Convert input image to a normal map."]
    pub bNormalMap: vlBool,
    #[doc = "!< Normal map generation kernel."]
    pub KernelFilter: VTFKernelFilter,
    #[doc = "!< Method or determining height from input image during normal map creation."]
    pub HeightConversionMethod: VTFHeightConversionMethod,
    #[doc = "!< How to handle output image alpha channel, post normal map creation."]
    pub NormalAlphaResult: VTFNormalAlphaResult,
    #[doc = "!< Minimum normal Z value."]
    pub bNormalMinimumZ: vlByte,
    #[doc = "!< Normal map scale."]
    pub sNormalScale: vlSingle,
    #[doc = "!< Wrap the normal map."]
    pub bNormalWrap: vlBool,
    #[doc = "!< Invert the normal X component."]
    pub bNormalInvertX: vlBool,
    #[doc = "!< Invert the normal Y component."]
    pub bNormalInvertY: vlBool,
    #[doc = "!< Invert the normal Z component."]
    pub bNormalInvertZ: vlBool,
    #[doc = "!< Generate a sphere map for six faced environment maps."]
    pub bSphereMap: vlBool,
}
pub type SVTFCreateOptions = tagSVTFCreateOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSVTFTextureLODControlResource {
    pub ResolutionClampU: vlByte,
    pub ResolutionClampV: vlByte,
    pub Padding: [vlByte; 2usize],
}
pub type SVTFTextureLODControlResource = tagSVTFTextureLODControlResource;
pub const tagVLProc_PROC_READ_CLOSE: tagVLProc = 0;
pub const tagVLProc_PROC_READ_OPEN: tagVLProc = 1;
pub const tagVLProc_PROC_READ_READ: tagVLProc = 2;
pub const tagVLProc_PROC_READ_SEEK: tagVLProc = 3;
pub const tagVLProc_PROC_READ_TELL: tagVLProc = 4;
pub const tagVLProc_PROC_READ_SIZE: tagVLProc = 5;
pub const tagVLProc_PROC_WRITE_CLOSE: tagVLProc = 6;
pub const tagVLProc_PROC_WRITE_OPEN: tagVLProc = 7;
pub const tagVLProc_PROC_WRITE_WRITE: tagVLProc = 8;
pub const tagVLProc_PROC_WRITE_SEEK: tagVLProc = 9;
pub const tagVLProc_PROC_WRITE_SIZE: tagVLProc = 10;
pub const tagVLProc_PROC_WRITE_TELL: tagVLProc = 11;
pub const tagVLProc_PROC_COUNT: tagVLProc = 12;
pub type tagVLProc = ::std::os::raw::c_int;
pub use self::tagVLProc as VLProc;
pub const tagVLSeekMode_SEEK_MODE_BEGIN: tagVLSeekMode = 0;
pub const tagVLSeekMode_SEEK_MODE_CURRENT: tagVLSeekMode = 1;
pub const tagVLSeekMode_SEEK_MODE_END: tagVLSeekMode = 2;
pub type tagVLSeekMode = ::std::os::raw::c_int;
pub use self::tagVLSeekMode as VLSeekMode;
pub type PReadCloseProc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut vlVoid) -> vlVoid>;
pub type PReadOpenProc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut vlVoid) -> vlBool>;
pub type PReadReadProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut vlVoid, arg2: vlUInt, arg3: *mut vlVoid) -> vlUInt,
>;
pub type PReadSeekProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: vlLong, arg2: VLSeekMode, arg3: *mut vlVoid) -> vlUInt,
>;
pub type PReadSizeProc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut vlVoid) -> vlUInt>;
pub type PReadTellProc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut vlVoid) -> vlUInt>;
pub type PWriteCloseProc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut vlVoid) -> vlVoid>;
pub type PWriteOpenProc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut vlVoid) -> vlBool>;
pub type PWriteWriteProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut vlVoid, arg2: vlUInt, arg3: *mut vlVoid) -> vlUInt,
>;
pub type PWriteSeekProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: vlLong, arg2: VLSeekMode, arg3: *mut vlVoid) -> vlUInt,
>;
pub type PWriteSizeProc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut vlVoid) -> vlUInt>;
pub type PWriteTellProc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut vlVoid) -> vlUInt>;
extern "C" {
    pub fn vlGetVersion() -> vlUInt;
}
extern "C" {
    pub fn vlGetVersionString() -> *const vlChar;
}
extern "C" {
    pub fn vlGetLastError() -> *const vlChar;
}
extern "C" {
    pub fn vlInitialize() -> vlBool;
}
extern "C" {
    pub fn vlShutdown() -> vlVoid;
}
extern "C" {
    pub fn vlGetBoolean(Option: VTFLibOption) -> vlBool;
}
extern "C" {
    pub fn vlSetBoolean(Option: VTFLibOption, bValue: vlBool) -> vlVoid;
}
extern "C" {
    pub fn vlGetInteger(Option: VTFLibOption) -> vlInt;
}
extern "C" {
    pub fn vlSetInteger(Option: VTFLibOption, iValue: vlInt) -> vlVoid;
}
extern "C" {
    pub fn vlGetFloat(Option: VTFLibOption) -> vlSingle;
}
extern "C" {
    pub fn vlSetFloat(Option: VTFLibOption, sValue: vlSingle) -> vlVoid;
}
extern "C" {
    pub fn vlSetProc(Proc: VLProc, pProc: *mut vlVoid) -> vlVoid;
}
extern "C" {
    pub fn vlGetProc(Proc: VLProc) -> *mut vlVoid;
}
extern "C" {
    pub fn vlImageIsBound() -> vlBool;
}
extern "C" {
    pub fn vlBindImage(uiImage: vlUInt) -> vlBool;
}
extern "C" {
    pub fn vlCreateImage(uiImage: *mut vlUInt) -> vlBool;
}
extern "C" {
    pub fn vlDeleteImage(uiImage: vlUInt) -> vlVoid;
}
extern "C" {
    pub fn vlImageCreateDefaultCreateStructure(VTFCreateOptions: *mut SVTFCreateOptions) -> vlVoid;
}
extern "C" {
    pub fn vlImageCreate(
        uiWidth: vlUInt,
        uiHeight: vlUInt,
        uiFrames: vlUInt,
        uiFaces: vlUInt,
        uiSlices: vlUInt,
        ImageFormat: VTFImageFormat,
        bThumbnail: vlBool,
        bMipmaps: vlBool,
        bNullImageData: vlBool,
    ) -> vlBool;
}
extern "C" {
    pub fn vlImageCreateSingle(
        uiWidth: vlUInt,
        uiHeight: vlUInt,
        lpImageDataRGBA8888: *mut vlByte,
        VTFCreateOptions: *mut SVTFCreateOptions,
    ) -> vlBool;
}
extern "C" {
    pub fn vlImageCreateMultiple(
        uiWidth: vlUInt,
        uiHeight: vlUInt,
        uiFrames: vlUInt,
        uiFaces: vlUInt,
        uiSlices: vlUInt,
        lpImageDataRGBA8888: *mut *mut vlByte,
        VTFCreateOptions: *mut SVTFCreateOptions,
    ) -> vlBool;
}
extern "C" {
    pub fn vlImageDestroy() -> vlVoid;
}
extern "C" {
    pub fn vlImageIsLoaded() -> vlBool;
}
extern "C" {
    pub fn vlImageLoad(cFileName: *const vlChar, bHeaderOnly: vlBool) -> vlBool;
}
extern "C" {
    pub fn vlImageLoadLump(
        lpData: *const vlVoid,
        uiBufferSize: vlUInt,
        bHeaderOnly: vlBool,
    ) -> vlBool;
}
extern "C" {
    pub fn vlImageLoadProc(pUserData: *mut vlVoid, bHeaderOnly: vlBool) -> vlBool;
}
extern "C" {
    pub fn vlImageSave(cFileName: *const vlChar) -> vlBool;
}
extern "C" {
    pub fn vlImageSaveLump(
        lpData: *mut vlVoid,
        uiBufferSize: vlUInt,
        uiSize: *mut vlUInt,
    ) -> vlBool;
}
extern "C" {
    pub fn vlImageSaveProc(pUserData: *mut vlVoid) -> vlBool;
}
extern "C" {
    pub fn vlImageGetHasImage() -> vlUInt;
}
extern "C" {
    pub fn vlImageGetMajorVersion() -> vlUInt;
}
extern "C" {
    pub fn vlImageGetMinorVersion() -> vlUInt;
}
extern "C" {
    pub fn vlImageGetSize() -> vlUInt;
}
extern "C" {
    pub fn vlImageGetWidth() -> vlUInt;
}
extern "C" {
    pub fn vlImageGetHeight() -> vlUInt;
}
extern "C" {
    pub fn vlImageGetDepth() -> vlUInt;
}
extern "C" {
    pub fn vlImageGetFrameCount() -> vlUInt;
}
extern "C" {
    pub fn vlImageGetFaceCount() -> vlUInt;
}
extern "C" {
    pub fn vlImageGetMipmapCount() -> vlUInt;
}
extern "C" {
    pub fn vlImageGetStartFrame() -> vlUInt;
}
extern "C" {
    pub fn vlImageSetStartFrame(uiStartFrame: vlUInt) -> vlVoid;
}
extern "C" {
    pub fn vlImageGetFlags() -> vlUInt;
}
extern "C" {
    pub fn vlImageSetFlags(uiFlags: vlUInt) -> vlVoid;
}
extern "C" {
    pub fn vlImageGetFlag(ImageFlag: VTFImageFlag) -> vlBool;
}
extern "C" {
    pub fn vlImageSetFlag(ImageFlag: VTFImageFlag, bState: vlBool) -> vlVoid;
}
extern "C" {
    pub fn vlImageGetBumpmapScale() -> vlSingle;
}
extern "C" {
    pub fn vlImageSetBumpmapScale(sBumpmapScale: vlSingle) -> vlVoid;
}
extern "C" {
    pub fn vlImageGetReflectivity(
        sX: *mut vlSingle,
        sY: *mut vlSingle,
        sZ: *mut vlSingle,
    ) -> vlVoid;
}
extern "C" {
    pub fn vlImageSetReflectivity(sX: vlSingle, sY: vlSingle, sZ: vlSingle) -> vlVoid;
}
extern "C" {
    pub fn vlImageGetFormat() -> VTFImageFormat;
}
extern "C" {
    pub fn vlImageGetData(
        uiFrame: vlUInt,
        uiFace: vlUInt,
        uiSlice: vlUInt,
        uiMipmapLevel: vlUInt,
    ) -> *mut vlByte;
}
extern "C" {
    pub fn vlImageSetData(
        uiFrame: vlUInt,
        uiFace: vlUInt,
        uiSlice: vlUInt,
        uiMipmapLevel: vlUInt,
        lpData: *mut vlByte,
    ) -> vlVoid;
}
extern "C" {
    pub fn vlImageGetHasThumbnail() -> vlBool;
}
extern "C" {
    pub fn vlImageGetThumbnailWidth() -> vlUInt;
}
extern "C" {
    pub fn vlImageGetThumbnailHeight() -> vlUInt;
}
extern "C" {
    pub fn vlImageGetThumbnailFormat() -> VTFImageFormat;
}
extern "C" {
    pub fn vlImageGetThumbnailData() -> *mut vlByte;
}
extern "C" {
    pub fn vlImageSetThumbnailData(lpData: *mut vlByte) -> vlVoid;
}
extern "C" {
    pub fn vlImageGetSupportsResources() -> vlBool;
}
extern "C" {
    pub fn vlImageGetResourceCount() -> vlUInt;
}
extern "C" {
    pub fn vlImageGetResourceType(uiIndex: vlUInt) -> vlUInt;
}
extern "C" {
    pub fn vlImageGetHasResource(uiType: vlUInt) -> vlBool;
}
extern "C" {
    pub fn vlImageGetResourceData(uiType: vlUInt, uiSize: *mut vlUInt) -> *mut vlVoid;
}
extern "C" {
    pub fn vlImageSetResourceData(
        uiType: vlUInt,
        uiSize: vlUInt,
        lpData: *mut vlVoid,
    ) -> *mut vlVoid;
}
extern "C" {
    pub fn vlImageGenerateMipmaps(
        uiFace: vlUInt,
        uiFrame: vlUInt,
        MipmapFilter: VTFMipmapFilter,
        SharpenFilter: VTFSharpenFilter,
    ) -> vlBool;
}
extern "C" {
    pub fn vlImageGenerateAllMipmaps(
        MipmapFilter: VTFMipmapFilter,
        SharpenFilter: VTFSharpenFilter,
    ) -> vlBool;
}
extern "C" {
    pub fn vlImageGenerateThumbnail() -> vlBool;
}
extern "C" {
    pub fn vlImageGenerateNormalMap(
        uiFrame: vlUInt,
        KernelFilter: VTFKernelFilter,
        HeightConversionMethod: VTFHeightConversionMethod,
        NormalAlphaResult: VTFNormalAlphaResult,
    ) -> vlBool;
}
extern "C" {
    pub fn vlImageGenerateAllNormalMaps(
        KernelFilter: VTFKernelFilter,
        HeightConversionMethod: VTFHeightConversionMethod,
        NormalAlphaResult: VTFNormalAlphaResult,
    ) -> vlBool;
}
extern "C" {
    pub fn vlImageGenerateSphereMap() -> vlBool;
}
extern "C" {
    pub fn vlImageComputeReflectivity() -> vlBool;
}
extern "C" {
    pub fn vlImageGetImageFormatInfo(ImageFormat: VTFImageFormat) -> *const SVTFImageFormatInfo;
}
extern "C" {
    pub fn vlImageGetImageFormatInfoEx(
        ImageFormat: VTFImageFormat,
        VTFImageFormatInfo: *mut SVTFImageFormatInfo,
    ) -> vlBool;
}
extern "C" {
    pub fn vlImageComputeImageSize(
        uiWidth: vlUInt,
        uiHeight: vlUInt,
        uiDepth: vlUInt,
        uiMipmaps: vlUInt,
        ImageFormat: VTFImageFormat,
    ) -> vlUInt;
}
extern "C" {
    pub fn vlImageComputeMipmapCount(uiWidth: vlUInt, uiHeight: vlUInt, uiDepth: vlUInt) -> vlUInt;
}
extern "C" {
    pub fn vlImageComputeMipmapDimensions(
        uiWidth: vlUInt,
        uiHeight: vlUInt,
        uiDepth: vlUInt,
        uiMipmapLevel: vlUInt,
        uiMipmapWidth: *mut vlUInt,
        uiMipmapHeight: *mut vlUInt,
        uiMipmapDepth: *mut vlUInt,
    ) -> vlVoid;
}
extern "C" {
    pub fn vlImageComputeMipmapSize(
        uiWidth: vlUInt,
        uiHeight: vlUInt,
        uiDepth: vlUInt,
        uiMipmapLevel: vlUInt,
        ImageFormat: VTFImageFormat,
    ) -> vlUInt;
}
extern "C" {
    pub fn vlImageConvertToRGBA8888(
        lpSource: *mut vlByte,
        lpDest: *mut vlByte,
        uiWidth: vlUInt,
        uiHeight: vlUInt,
        SourceFormat: VTFImageFormat,
    ) -> vlBool;
}
extern "C" {
    pub fn vlImageConvertFromRGBA8888(
        lpSource: *mut vlByte,
        lpDest: *mut vlByte,
        uiWidth: vlUInt,
        uiHeight: vlUInt,
        DestFormat: VTFImageFormat,
    ) -> vlBool;
}
extern "C" {
    pub fn vlImageConvert(
        lpSource: *mut vlByte,
        lpDest: *mut vlByte,
        uiWidth: vlUInt,
        uiHeight: vlUInt,
        SourceFormat: VTFImageFormat,
        DestFormat: VTFImageFormat,
    ) -> vlBool;
}
extern "C" {
    pub fn vlImageConvertToNormalMap(
        lpSourceRGBA8888: *mut vlByte,
        lpDestRGBA8888: *mut vlByte,
        uiWidth: vlUInt,
        uiHeight: vlUInt,
        KernelFilter: VTFKernelFilter,
        HeightConversionMethod: VTFHeightConversionMethod,
        NormalAlphaResult: VTFNormalAlphaResult,
        bMinimumZ: vlByte,
        sScale: vlSingle,
        bWrap: vlBool,
        bInvertX: vlBool,
        bInvertY: vlBool,
    ) -> vlBool;
}
extern "C" {
    pub fn vlImageResize(
        lpSourceRGBA8888: *mut vlByte,
        lpDestRGBA8888: *mut vlByte,
        uiSourceWidth: vlUInt,
        uiSourceHeight: vlUInt,
        uiDestWidth: vlUInt,
        uiDestHeight: vlUInt,
        ResizeFilter: VTFMipmapFilter,
        SharpenFilter: VTFSharpenFilter,
    ) -> vlBool;
}
extern "C" {
    pub fn vlImageCorrectImageGamma(
        lpImageDataRGBA8888: *mut vlByte,
        uiWidth: vlUInt,
        uiHeight: vlUInt,
        sGammaCorrection: vlSingle,
    ) -> vlVoid;
}
extern "C" {
    pub fn vlImageComputeImageReflectivity(
        lpImageDataRGBA8888: *mut vlByte,
        uiWidth: vlUInt,
        uiHeight: vlUInt,
        sX: *mut vlSingle,
        sY: *mut vlSingle,
        sZ: *mut vlSingle,
    ) -> vlVoid;
}
extern "C" {
    pub fn vlImageFlipImage(
        lpImageDataRGBA8888: *mut vlByte,
        uiWidth: vlUInt,
        uiHeight: vlUInt,
    ) -> vlVoid;
}
extern "C" {
    pub fn vlImageMirrorImage(
        lpImageDataRGBA8888: *mut vlByte,
        uiWidth: vlUInt,
        uiHeight: vlUInt,
    ) -> vlVoid;
}
extern "C" {
    pub fn vlMaterialIsBound() -> vlBool;
}
extern "C" {
    pub fn vlBindMaterial(uiMaterial: vlUInt) -> vlBool;
}
extern "C" {
    pub fn vlCreateMaterial(uiMaterial: *mut vlUInt) -> vlBool;
}
extern "C" {
    pub fn vlDeleteMaterial(uiMaterial: vlUInt) -> vlVoid;
}
extern "C" {
    pub fn vlMaterialCreate(cRoot: *const vlChar) -> vlBool;
}
extern "C" {
    pub fn vlMaterialDestroy() -> vlVoid;
}
extern "C" {
    pub fn vlMaterialIsLoaded() -> vlBool;
}
extern "C" {
    pub fn vlMaterialLoad(cFileName: *const vlChar) -> vlBool;
}
extern "C" {
    pub fn vlMaterialLoadLump(lpData: *const vlVoid, uiBufferSize: vlUInt) -> vlBool;
}
extern "C" {
    pub fn vlMaterialLoadProc(pUserData: *mut vlVoid) -> vlBool;
}
extern "C" {
    pub fn vlMaterialSave(cFileName: *const vlChar) -> vlBool;
}
extern "C" {
    pub fn vlMaterialSaveLump(
        lpData: *mut vlVoid,
        uiBufferSize: vlUInt,
        uiSize: *mut vlUInt,
    ) -> vlBool;
}
extern "C" {
    pub fn vlMaterialSaveProc(pUserData: *mut vlVoid) -> vlBool;
}
extern "C" {
    pub fn vlMaterialGetFirstNode() -> vlBool;
}
extern "C" {
    pub fn vlMaterialGetLastNode() -> vlBool;
}
extern "C" {
    pub fn vlMaterialGetNextNode() -> vlBool;
}
extern "C" {
    pub fn vlMaterialGetPreviousNode() -> vlBool;
}
extern "C" {
    pub fn vlMaterialGetParentNode() -> vlBool;
}
extern "C" {
    pub fn vlMaterialGetChildNode(cName: *const vlChar) -> vlBool;
}
extern "C" {
    pub fn vlMaterialGetNodeName() -> *const vlChar;
}
extern "C" {
    pub fn vlMaterialSetNodeName(cName: *const vlChar) -> vlVoid;
}
extern "C" {
    pub fn vlMaterialGetNodeType() -> VMTNodeType;
}
extern "C" {
    pub fn vlMaterialGetNodeString() -> *const vlChar;
}
extern "C" {
    pub fn vlMaterialSetNodeString(cValue: *const vlChar) -> vlVoid;
}
extern "C" {
    pub fn vlMaterialGetNodeInteger() -> vlUInt;
}
extern "C" {
    pub fn vlMaterialSetNodeInteger(iValue: vlUInt) -> vlVoid;
}
extern "C" {
    pub fn vlMaterialGetNodeSingle() -> vlFloat;
}
extern "C" {
    pub fn vlMaterialSetNodeSingle(sValue: vlFloat) -> vlVoid;
}
extern "C" {
    pub fn vlMaterialAddNodeGroup(cName: *const vlChar) -> vlVoid;
}
extern "C" {
    pub fn vlMaterialAddNodeString(cName: *const vlChar, cValue: *const vlChar) -> vlVoid;
}
extern "C" {
    pub fn vlMaterialAddNodeInteger(cName: *const vlChar, iValue: vlUInt) -> vlVoid;
}
extern "C" {
    pub fn vlMaterialAddNodeSingle(cName: *const vlChar, sValue: vlFloat) -> vlVoid;
}
